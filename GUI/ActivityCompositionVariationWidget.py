# ActivityCompositionVariationWidget.py (UI Optimized)
import sys
import traceback
import re
from typing import Dict

import numpy as np
import matplotlib.pyplot as plt
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QColor
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QFormLayout,
                             QLineEdit, QComboBox, QDoubleSpinBox, QCheckBox, QPushButton,
                             QSplitter, QGridLayout, QLabel, QProgressDialog, QMessageBox,
                             QFileDialog, QFrame, QGraphicsDropShadowEffect)

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

try:
	import matplotlib.style as mplstyle
except ImportError:
	mplstyle = None

from core import UnifiedExtrapolationModel as UEM
from utils.tool import export_data_to_file


# ==============================================================================
# Áé∞‰ª£ÂåñÁöÑËá™ÂÆö‰πâUIÊéß‰ª∂
# ==============================================================================
class StyledGroupBox(QGroupBox):
	def __init__ (self, title, parent=None):
		super().__init__(title, parent)
		self.setFont(QFont("Microsoft YaHei", 13, QFont.Bold))
		self.setStyleSheet("""
            QGroupBox {
                font-weight: bold; border: 1px solid #e0e0e0; border-radius: 8px;
                margin-top: 10px; background-color: #ffffff; padding: 15px;
            }
            QGroupBox::title { subcontrol-origin: margin; left: 10px; padding: 0 5px; }
        """)


class StyledButton(QPushButton):
	def __init__ (self, text, button_type="primary", parent=None):
		super().__init__(text, parent)
		self.setMinimumHeight(40)
		self.setFont(QFont("Microsoft YaHei", 13, QFont.Bold))
		base_style = "border: none; border-radius: 6px; color: white; padding: 8px 16px;"
		if button_type == "primary":
			self.setStyleSheet(f"""QPushButton {{ background-color: #6366f1; {base_style} }}
                                 QPushButton:hover {{ background-color: #4f46e5; }}
                                 QPushButton:pressed {{ background-color: #4338ca; }}""")
		else:
			self.setStyleSheet(f"""QPushButton {{ background-color: #6b7280; {base_style} }}
                                 QPushButton:hover {{ background-color: #4b5563; }}
                                 QPushButton:pressed {{ background-color: #374151; }}""")


class AnimatedCheckBox(QCheckBox):
	def __init__ (self, text, parent=None):
		super().__init__(text, parent)
		self.setFont(QFont("Microsoft YaHei", 12))
		self.setStyleSheet("""
            QCheckBox { spacing: 8px; }
            QCheckBox::indicator { width: 18px; height: 18px; border-radius: 4px; border: 1px solid #d1d5db; background-color: #f9fafb; }
            QCheckBox::indicator:hover { border-color: #a5b4fc; }
            QCheckBox::indicator:checked { border-color: #6366f1; background-color: #6366f1; }""")


class StyledComboBox(QComboBox):
	def __init__ (self, parent=None):
		super().__init__(parent)
		self.setMinimumHeight(32)
		self.setFont(QFont("Microsoft YaHei", 12))
		self.setStyleSheet("""
            QComboBox { border: 1px solid #d1d5db; border-radius: 4px; padding: 5px; background-color: white; }
            QComboBox:hover { border-color: #a5b4fc; }
            QComboBox::drop-down { width: 20px; border-left: 1px solid #d1d5db; }""")


class StyledLineEdit(QLineEdit):
	def __init__ (self, parent=None):
		super().__init__(parent)
		self.setMinimumHeight(32)
		self.setFont(QFont("Microsoft YaHei", 12))
		self.setStyleSheet("""
            QLineEdit { border: 1px solid #d1d5db; border-radius: 4px; padding: 5px; background-color: white; }
            QLineEdit:hover { border-color: #a5b4fc; }
            QLineEdit:focus { border-color: #6366f1; }""")


class StyledSpinBox(QDoubleSpinBox):
	def __init__ (self, parent=None):
		super().__init__(parent)
		self.setMinimumHeight(32)
		self.setFont(QFont("Microsoft YaHei", 12))
		self.setStyleSheet("""
            QDoubleSpinBox { border: 1px solid #d1d5db; border-radius: 4px; padding: 5px; background-color: white; }
            QDoubleSpinBox:hover { border-color: #a5b4fc; }
            QDoubleSpinBox:focus { border-color: #6366f1; }""")


class StatusIndicator(QLabel):
	def __init__ (self, parent=None):
		super().__init__(parent)
		self.setFixedSize(12, 12)
		self.set_status("idle")
	
	def set_status (self, status):
		color_map = {"idle": "#95a5a6", "calculating": "#f39c12", "success": "#27ae60", "error": "#e74c3c"}
		self.setStyleSheet(
			f"background-color: {color_map.get(status, '#95a5a6')}; border-radius: 6px; border: 2px solid white;")


# ==============================================================================
# ‰∏ªÊéß‰ª∂
# ==============================================================================

class ActivityCompositionVariationWidget(QWidget):
	"""Ê¥ªÂ∫¶/Ê¥ªÂ∫¶Á≥ªÊï∞ÈöèÊàêÂàÜÂèòÂåñËÆ°ÁÆóÂô® (UI‰ºòÂåñÁâà)"""
	
	def __init__ (self, parent=None):
		super().__init__(parent)
		self.parent_window = parent
		plt.rcParams['font.sans-serif'] = ['SimHei', 'Microsoft YaHei', 'SimSun']
		plt.rcParams['axes.unicode_minus'] = False
		if mplstyle:
			try:
				mplstyle.use('seaborn-v0_8-whitegrid')
			except:
				pass
		
		self.calculation_results = {"activity": {}, "activity_coefficient": {}}
		self.current_parameters = {}
		self.has_calculated = False
		
		self.init_ui()
	
	def init_ui (self):
		"""ÂàùÂßãÂåñÁî®Êà∑ÁïåÈù¢ÁªÑ‰ª∂ (‰ºòÂåñÁâà)"""
		self.setStyleSheet("background-color: #f3f4f6;")
		main_layout = QVBoxLayout(self)
		main_layout.setContentsMargins(15, 15, 15, 15)
		main_layout.setSpacing(15)
		
		main_layout.addWidget(self.create_title_frame())
		
		splitter = QSplitter(Qt.Horizontal)
		splitter.setHandleWidth(2)
		
		left_panel = self.create_left_panel()
		right_panel = self.create_right_panel()
		
		splitter.addWidget(left_panel)
		splitter.addWidget(right_panel)
		splitter.setSizes([420, 780])
		
		main_layout.addWidget(splitter)
		self.update_element_dropdowns()
	def create_form_label (self, text,size = 12):
		label = QLabel(text)
		label.setFont(QFont("Microsoft YaHei", size))  # <--- Âú®ËøôÈáåÁªü‰∏ÄËÆæÁΩÆÊ†áÁ≠æÂ≠ó‰Ωì
		return label
	def create_title_frame (self):
		"""ÂàõÂª∫Ê†áÈ¢òÊ†è"""
		frame = QFrame(
			styleSheet="background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #818cf8, stop:1 #6366f1); border-radius: 8px;")
		layout = QHBoxLayout(frame)
		
		text_layout = QVBoxLayout()
		text_layout.addWidget(QLabel("Ê¥ªÂ∫¶ÈöèÊàêÂàÜÂèòÂåñÂàÜÊûê",
		                             styleSheet="color: white; font-size: 18px; font-weight: bold; background: transparent;"))
		text_layout.addWidget(QLabel("Activity vs. Composition Analysis",
		                             styleSheet="color: rgba(255, 255, 255, 0.8); background: transparent;"))
		
		status_layout = QHBoxLayout()
		self.status_indicator = StatusIndicator()
		self.status_label = QLabel("Â∞±Áª™",
		                           styleSheet="color: white; font-size: 12px; background: transparent; margin-left: 8px;")
		status_layout.addWidget(self.status_indicator)
		status_layout.addWidget(self.status_label)
		
		layout.addLayout(text_layout)
		layout.addStretch()
		layout.addLayout(status_layout)
		return frame
	
	def create_left_panel (self):
		"""ÂàõÂª∫Â∑¶‰æßÊéßÂà∂Èù¢Êùø"""
		panel = QWidget()
		panel.setMinimumWidth(380);
		panel.setMaximumWidth(450)
		
		layout = QVBoxLayout(panel)
		layout.setSpacing(15);
		layout.setContentsMargins(0, 0, 0, 0)
		
		layout.addWidget(self.create_alloy_definition_group())
		layout.addWidget(self.create_calculation_params_group())
		layout.addWidget(self.create_model_selection_group())
		layout.addStretch(1)
		layout.addWidget(self.create_action_buttons())
		
		return panel
	
	def create_alloy_definition_group (self):
		"""ÂàõÂª∫ÂêàÈáëÂÆö‰πâÂíåÊàêÂàÜÂèòÂåñËåÉÂõ¥ÁöÑÁªÑÂêàÊ°Ü"""
		group = StyledGroupBox("üî¨ ÂêàÈáë‰∏éÊàêÂàÜËåÉÂõ¥")
		layout = QFormLayout(group)
		layout.setSpacing(10)
		
		# ÂêàÈáëÁªÑÊàê
		input_row = QHBoxLayout()
		self.matrix_input = StyledLineEdit("Fe0.7Ni0.3")
		self.matrix_input.setPlaceholderText("‰æãÂ¶Ç: Fe0.7Ni0.3")
		update_btn = QPushButton("Êõ¥Êñ∞")
		update_btn.setMinimumHeight(32)
		update_btn.setFixedWidth(60)
		update_btn.clicked.connect(self.update_element_dropdowns)
		input_row.addWidget(self.matrix_input);
		input_row.addWidget(update_btn)
		layout.addRow(self.create_form_label("Âü∫‰ΩìÂêàÈáë:"), input_row)
		
		# ÂÖÉÁ¥†ÈÄâÊã©
		self.solvent_combo = StyledComboBox()
		self.target_element_combo = StyledComboBox()
		self.var_element_combo = StyledComboBox()
		layout.addRow(self.create_form_label("Ê∫∂ÂâÇÂÖÉÁ¥†:"), self.solvent_combo)
		layout.addRow(self.create_form_label("ÁõÆÊ†áÂÖÉÁ¥†:"), self.target_element_combo)
		layout.addRow(self.create_form_label("ÂèòÂåñÂÖÉÁ¥†:"), self.var_element_combo)
		
		# ÁªÑÊàêËåÉÂõ¥
		range_widget = QWidget()
		range_layout = QGridLayout(range_widget)
		range_layout.setContentsMargins(0, 0, 0, 0);
		range_layout.setSpacing(5)
		self.min_comp = StyledSpinBox();
		self.min_comp.setRange(0.0, 1.0);
		self.min_comp.setValue(0.0)
		self.max_comp = StyledSpinBox();
		self.max_comp.setRange(0.0, 1.0);
		self.max_comp.setValue(0.5)
		self.step_comp = StyledSpinBox();
		self.step_comp.setRange(0.01, 0.2);
		self.step_comp.setValue(0.05)
		range_layout.addWidget(self.create_form_label("min:",10), 0, 0);
		range_layout.addWidget(self.min_comp, 0, 1)
		range_layout.addWidget(self.create_form_label("max:",10), 0, 2);
		range_layout.addWidget(self.max_comp, 0, 3)
		range_layout.addWidget(self.create_form_label("step:",10), 1, 0);
		range_layout.addWidget(self.step_comp, 1, 1)
		layout.addRow(self.create_form_label("ÂèòÂåñËåÉÂõ¥:"), range_widget)
		
		return group
	
	def create_calculation_params_group (self):
		"""ÂàõÂª∫Âõ∫ÂÆöÁöÑËÆ°ÁÆóÂèÇÊï∞Âå∫Âüü"""
		group = StyledGroupBox("‚öôÔ∏è ËÆ°ÁÆóÂèÇÊï∞")
		layout = QFormLayout(group)
		layout.setSpacing(10)
		
		self.temp_input = StyledSpinBox()
		self.temp_input.setRange(300, 5000);
		self.temp_input.setValue(1000);
		self.temp_input.setSuffix(" K")
		
		self.phase_combo = StyledComboBox();
		self.phase_combo.addItems(["Âõ∫ÊÄÅ (S)", "Ê∂≤ÊÄÅ (L)"])
		self.order_combo = StyledComboBox();
		self.order_combo.addItems(["Âõ∫Ê∫∂‰Ωì (SS)", "ÈùûÊô∂ÊÄÅ (AMP)", "ÈáëÂ±ûÈó¥ÂåñÂêàÁâ© (IM)"])
		self.property_combo = StyledComboBox();
		self.property_combo.addItems(["Ê¥ªÂ∫¶ (a)", "Ê¥ªÂ∫¶Á≥ªÊï∞ (Œ≥)"])
		self.property_combo.currentIndexChanged.connect(self.update_plot)
		self.geo_model_combo = StyledComboBox();
		self.geo_model_combo.addItems(["UEM1", "UEM2_N", "GSM", "T-K", "K", "M"])
		
		layout.addRow(self.create_form_label("Âõ∫ÂÆöÊ∏©Â∫¶:"), self.temp_input)
		layout.addRow(self.create_form_label("Áõ∏ÊÄÅ:"), self.phase_combo)
		layout.addRow(self.create_form_label("Á±ªÂûã:"), self.order_combo)
		layout.addRow(self.create_form_label("Âá†‰ΩïÊ®°Âûã:"), self.geo_model_combo)
		layout.addRow(self.create_form_label("ËÆ°ÁÆóÊÄßË¥®:"), self.property_combo)
		return group
	
	def create_model_selection_group (self):
		"""ÂàõÂª∫Â§ñÊé®Ê®°ÂûãÈÄâÊã©Âå∫Âüü"""
		group = StyledGroupBox("üßÆ Â§ñÊé®Ê®°ÂûãÈÄâÊã©")
		layout = QGridLayout(group)
		layout.setSpacing(10)
		
		self.model_checkboxes = {}
		models = [("Kohler", "K"), ("Muggianu", "M"), ("Toop-Kohler", "T-K"),
		          ("GSM/Chou", "GSM"), ("UEM1", "UEM1"), ("UEM2_N", "UEM2_N")]
		for index, (name, key) in enumerate(models):
			checkbox = AnimatedCheckBox(name)
			if key in ["UEM1", "GSM"]: checkbox.setChecked(True)
			self.model_checkboxes[key] = checkbox
			layout.addWidget(checkbox, index // 2, index % 2)
		return group
	
	def create_action_buttons (self):
		"""ÂàõÂª∫Êìç‰ΩúÊåâÈíÆÂå∫Âüü"""
		container = QWidget()
		layout = QHBoxLayout(container)
		layout.setSpacing(15);
		layout.setContentsMargins(0, 10, 0, 0)
		
		calculate_button = StyledButton("üöÄ ËÆ°ÁÆó", "primary")
		export_button = StyledButton("üìä ÂØºÂá∫Êï∞ÊçÆ", "secondary")
		calculate_button.clicked.connect(self.calculate_all_properties)
		export_button.clicked.connect(self.export_data)
		
		layout.addWidget(calculate_button, 1)
		layout.addWidget(export_button, 1)
		return container
	
	def create_right_panel (self):
		"""ÂàõÂª∫Âè≥‰æßÁªòÂõæÈù¢Êùø"""
		panel = QWidget()
		layout = QVBoxLayout(panel)
		layout.setContentsMargins(0, 0, 0, 0)
		
		title = QLabel("üìà ËÆ°ÁÆóÁªìÊûúÂèØËßÜÂåñ",
		               styleSheet="font-size: 16px; font-weight: bold; color: #2c3e50; padding: 8px;")
		
		self.figure = Figure(figsize=(8, 8), dpi=100)
		self.canvas = FigureCanvas(self.figure)
		self.toolbar = NavigationToolbar(self.canvas, self)
		
		layout.addWidget(title)
		layout.addWidget(self.toolbar)
		layout.addWidget(self.canvas)
		return panel
	
	def update_status (self, status, message):
		"""Êõ¥Êñ∞Áä∂ÊÄÅÊåáÁ§∫Âô®"""
		self.status_indicator.set_status(status)
		self.status_label.setText(message)
	
	def update_element_dropdowns (self):
		"""Ê†πÊçÆÂΩìÂâçËæìÂÖ•ÁöÑÂêàÈáëÁªÑÊàêÊõ¥Êñ∞ÂÖÉÁ¥†‰∏ãÊãâÂàóË°®"""
		comp_input = self.matrix_input.text().strip()
		if not comp_input: return
		try:
			composition = self.parse_composition(comp_input)
			if not composition: return
			elements = sorted(list(composition.keys()))
			combos = [self.target_element_combo, self.var_element_combo, self.solvent_combo]
			for combo in combos: combo.blockSignals(True); combo.clear(); combo.addItems(elements)
			
			# Êô∫ËÉΩÁöÑÈªòËÆ§ÈÄâÊã©ÈÄªËæë
			if len(elements) > 0: self.solvent_combo.setCurrentIndex(0)
			if len(elements) > 1: self.target_element_combo.setCurrentIndex(1)
			if len(elements) > 2:
				self.var_element_combo.setCurrentIndex(2)
			else:
				self.var_element_combo.setCurrentIndex(0)
			
			# Á°Æ‰øù‰∏âËÄÖ‰∏çÂêåÔºàÂ¶ÇÊûúÂÖÉÁ¥†Ë∂≥Â§üÂ§öÔºâ
			if len(set([self.solvent_combo.currentText(), self.target_element_combo.currentText(),
			            self.var_element_combo.currentText()])) < 3:
				if len(elements) > 1 and self.target_element_combo.currentText() == self.var_element_combo.currentText():
					self.var_element_combo.setCurrentIndex(
						(self.target_element_combo.currentIndex() + 1) % len(elements))
			
			for combo in combos: combo.blockSignals(False)
		except Exception as e:
			print(f"Êõ¥Êñ∞ÂÖÉÁ¥†‰∏ãÊãâÂàóË°®Êó∂Âá∫Èîô: {str(e)}")
	
	def parse_composition (self, comp_input):
		"""Ëß£ÊûêÂêàÈáëÁªÑÊàêËæìÂÖ•Â≠óÁ¨¶‰∏≤Ôºå‰æãÂ¶ÇFe0.7Ni0.3"""
		composition = {}
		pattern = r'([A-Z][a-z]*)(\d*\.?\d*)'
		matches = re.findall(pattern, comp_input)
		
		total = sum(float(r) if r else 1.0 for _, r in matches)
		if total > 0:
			for e, r in matches:
				composition[e] = (float(r) if r else 1.0) / total
		return composition
	
	def calculate_all_properties (self):
		"""ËÆ°ÁÆóÊâÄÊúâÁÉ≠ÂäõÂ≠¶ÊÄßË¥®ÈöèÁªÑÂàÜÂèòÂåñÔºàÂ∑≤‰øÆÊ≠£Âíå‰ºòÂåñÔºâ"""
		self.update_status("calculating", "ËÆ°ÁÆó‰∏≠...")
		
		# 1. ÂÆâÂÖ®Âú∞Ëé∑ÂèñÊâÄÊúâUIËæìÂÖ•ÂèÇÊï∞
		matrix_input = self.matrix_input.text().strip()
		target_element = self.target_element_combo.currentText()
		var_element = self.var_element_combo.currentText()
		solvent = self.solvent_combo.currentText()
		
		if not all([matrix_input, target_element, var_element, solvent]):
			self.update_status("error", "ËæìÂÖ•‰∏çÂÆåÊï¥");
			QMessageBox.warning(self, "ËæìÂÖ•ÈîôËØØ", "ËØ∑Â°´ÂÜôÊâÄÊúâÂêàÈáë‰∏éÂÖÉÁ¥†‰ø°ÊÅØ„ÄÇ");
			return
		
		try:
			base_matrix = self.parse_composition(matrix_input)
		except Exception as e:
			self.update_status("error", "Ëß£ÊûêÈîôËØØ");
			QMessageBox.critical(self, "Ëß£ÊûêÈîôËØØ", f"Ëß£ÊûêÂü∫‰ΩìÂêàÈáëÊó∂Âá∫Èîô: {e}");
			return
		
		temperature = self.temp_input.value()
		phase_state = "S" if "Âõ∫ÊÄÅ" in self.phase_combo.currentText() else "L"
		order_text = self.order_combo.currentText()
		order_degree = "SS" if "Âõ∫Ê∫∂‰Ωì" in order_text else "AMP" if "ÈùûÊô∂ÊÄÅ" in order_text else "IM"
		geo_model = self.geo_model_combo.currentText()
		selected_models = [k for k, cb in self.model_checkboxes.items() if cb.isChecked()]
		if not selected_models:
			self.update_status("error", "Ê®°ÂûãÊú™ÈÄâÊã©");
			QMessageBox.warning(self, "Ê®°ÂûãÈÄâÊã©", "ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™Ê®°Âûã„ÄÇ");
			return
		
		comp_range = np.arange(self.min_comp.value(), self.max_comp.value() + self.step_comp.value() / 2,
		                       self.step_comp.value())
		
		self.current_parameters = locals()
		self.calculation_results = {p: {m: {"compositions": [], "values": []} for m in selected_models} for p in
		                            ["activity", "activity_coefficient"]}
		model_functions = {"K": UEM.Kohler, "M": UEM.Muggianu, "T-K": UEM.Toop_Kohler, "GSM": UEM.GSM, "UEM1": UEM.UEM1,
		                   "UEM2_N": UEM.UEM2_N}
		
		progress = QProgressDialog("Ê≠£Âú®ËÆ°ÁÆó...", "ÂèñÊ∂à", 0, len(selected_models) * len(comp_range), self)
		progress.setWindowModality(Qt.WindowModal);
		progress.show()
		
		try:
			for model_key in selected_models:
				if progress.wasCanceled(): break
				model_func = model_functions.get(model_key)
				if not model_func: continue
				progress.setLabelText(f"Â§ÑÁêÜÊ®°Âûã: {model_key}...")
				
				for x in comp_range:
					if progress.wasCanceled(): break
					progress.setValue(progress.value() + 1)
					
					# ÂÅ•Â£ÆÁöÑÊàêÂàÜËÆ°ÁÆóÈÄªËæë
					new_comp = {var_element: x}
					for element, ratio in base_matrix.items():
						new_comp[element] = new_comp.get(element, 0) + ratio * (1.0 - x)
					
					total = sum(new_comp.values())
					if abs(total - 1.0) > 1e-9:
						for k in new_comp: new_comp[k] /= total
					
					try:
						activity_val = UEM.calculate_activity(new_comp, target_element, solvent, temperature,
						                                      phase_state, order_degree, model_func, geo_model)
						self.calculation_results["activity"][model_key]["compositions"].append(x)
						self.calculation_results["activity"][model_key]["values"].append(activity_val)
						
						mole_fraction_i = new_comp.get(target_element, 1e-12)
						coeff_val = activity_val / mole_fraction_i
						self.calculation_results["activity_coefficient"][model_key]["compositions"].append(x)
						self.calculation_results["activity_coefficient"][model_key]["values"].append(coeff_val)
					except Exception as e:
						print(f"Âú® x={x:.3f}, Ê®°Âûã {model_key} ËÆ°ÁÆóÂ§±Ë¥•: {e}")
			
			progress.close()
			for prop in self.calculation_results.values():
				for model in prop.values():
					model["compositions"] = np.array(model["compositions"])
					model["values"] = np.array(model["values"])
			
			if not any(data['values'].size > 0 for prop in self.calculation_results.values() for data in prop.values()):
				self.update_status("error", "Êó†ÊúâÊïàÊï∞ÊçÆ");
				QMessageBox.warning(self, "Êó†ÊúâÊïàÊï∞ÊçÆ", "Âú®ÊåáÂÆöËåÉÂõ¥ÂÜÖÊú™ËÉΩËé∑ÂæóÊúâÊïàËÆ°ÁÆóÁªìÊûú„ÄÇ");
				return
			
			self.has_calculated = True
			self.update_status("success", "ËÆ°ÁÆóÂÆåÊàê")
			self.update_plot()
		except Exception as e:
			progress.close();
			self.update_status("error", "ËÆ°ÁÆóÈîôËØØ");
			QMessageBox.critical(self, "ËÆ°ÁÆóÈîôËØØ", f"ËÆ°ÁÆóÊó∂ÂèëÁîü‰∏•ÈáçÈîôËØØ: {e}\n{traceback.format_exc()}")
	
	def update_plot (self):
		"""Âü∫‰∫éÈÄâÊã©ÁöÑÁÉ≠ÂäõÂ≠¶ÊÄßË¥®Êõ¥Êñ∞ÂõæË°®"""
		if not self.has_calculated: return
		prop_idx = self.property_combo.currentIndex()
		prop_key = ["activity", "activity_coefficient"][prop_idx]
		self.plot_property_variation(self.calculation_results.get(prop_key, {}), prop_key)
	
	def plot_property_variation (self, model_results, property_type):
		"""ÁªòÂà∂ÁÉ≠ÂäõÂ≠¶ÊÄßË¥®ÈöèÁªÑÂàÜÂèòÂåñÁöÑÂõæË°®"""
		self.figure.clear()
		ax = self.figure.add_subplot(111)
		colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
		linestyles = ['-', '--', '-.', ':', (0, (3, 5, 1, 5)), (0, (5, 1))]
		markers = ['o', 's', '^', 'D', 'v', 'p']
		
		plotted_models = 0
		for i, (model_key, data) in enumerate(model_results.items()):
			if data and len(data.get("values", [])) > 0:
				ax.plot(data["compositions"], data["values"],
				        color=colors[i % len(colors)],
				        linestyle=linestyles[i % len(linestyles)],
				        marker=markers[i % len(markers)],
				        linewidth=2, markersize=5,
				        label=self.model_checkboxes[model_key].text())
				plotted_models += 1
		
		target = self.current_parameters.get('target_element', 'i')
		var = self.current_parameters.get('var_element', 'X')
		y_label, title_prop = (f"Ê¥ªÂ∫¶ $a_{{{target}}}$", "Ê¥ªÂ∫¶") if property_type == "activity" else (
		f"Ê¥ªÂ∫¶Á≥ªÊï∞ $\\gamma_{{{target}}}$", "Ê¥ªÂ∫¶Á≥ªÊï∞")
		
		ax.set_xlabel(f"{var} Êë©Â∞îÂàÜÊï∞ (x)", fontsize=12, fontweight='bold')
		ax.set_ylabel(y_label, fontsize=12, fontweight='bold')
		ax.set_title(f"{self.current_parameters.get('base_matrix', '')} ‰∏≠ {target} ÁöÑ{title_prop}", fontsize=14,
		             fontweight='bold', pad=12)
		ax.grid(True, linestyle='--', alpha=0.6)
		if plotted_models > 0: ax.legend()
		self.figure.tight_layout()
		self.canvas.draw()
	
	def export_data (self):
		"""ÂáÜÂ§áÊï∞ÊçÆÂπ∂Ë∞ÉÁî®ÈÄöÁî®ÁöÑÂØºÂá∫ÂáΩÊï∞"""
		if not self.has_calculated:
			QMessageBox.warning(self, "ÂØºÂá∫ÈîôËØØ", "ËØ∑ÂÖàËÆ°ÁÆóÊï∞ÊçÆÂÜçÂØºÂá∫„ÄÇ");
			return
		
		params = self.current_parameters
		var_element = params.get("var_element", "X")
		target_element = params.get("target_element", "i")
		parameters = {
			'Âü∫‰ΩìÂêàÈáë': params.get("matrix_input", ""), 'ÁõÆÊ†áÂÖÉÁ¥†': target_element,
			'ÂèòÂåñÂÖÉÁ¥†': var_element, 'Ê∫∂ÂâÇÂÖÉÁ¥†': params.get("solvent", "j"),
			'Âõ∫ÂÆöÊ∏©Â∫¶ (K)': params.get("temperature", 0), 'Áõ∏ÊÄÅ': params.get("phase_state", ""),
			'Á±ªÂûã': params.get("order_degree", ""), 'Âá†‰ΩïÊ®°Âûã': params.get("geo_model", "")
		}
		
		all_models = sorted([k for k, cb in self.model_checkboxes.items() if cb.isChecked()])
		all_compositions = sorted(list(set(np.concatenate(
				[data.get("compositions", []) for res in self.calculation_results.values() for data in res.values()]))))
		
		header = [f'{var_element} Êë©Â∞îÂàÜÊï∞ (x)']
		for model_key in all_models:
			header.extend([f'{self.model_checkboxes[model_key].text()}-Ê¥ªÂ∫¶',
			               f'{self.model_checkboxes[model_key].text()}-Ê¥ªÂ∫¶Á≥ªÊï∞(Œ≥)'])
		
		data_rows = []
		for comp in all_compositions:
			row = [comp]
			for model_key in all_models:
				for prop in ["activity", "activity_coefficient"]:
					data = self.calculation_results[prop].get(model_key, {})
					comps, vals = data.get("compositions", np.array([])), data.get("values", np.array([]))
					idx = np.where(comps == comp)[0]
					row.append(vals[idx[0]] if idx.size > 0 else None)
			data_rows.append(row)
		
		export_data_to_file(self, parameters, header, data_rows, f'{parameters["Âü∫‰ΩìÂêàÈáë"]}_activity_vs_{var_element}')